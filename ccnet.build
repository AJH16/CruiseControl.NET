<?xml version="1.0"?>

<project name="ccnet" default="test">


    <!-- custom scripts -->
    <script language="C#" prefix="RuWi">
          <references>
              <include name="System.dll" />
		  </references>

		  <code>
            <![CDATA[
                [Function("UpdateNsiVersion")]
                public static bool UpdateNsiVersion(string inputFile, string newVersion)
                {
                    bool ok = true;

                    try
                    {
                        System.IO.StreamReader versionFile = new System.IO.StreamReader(inputFile, System.Text.Encoding.ASCII);
                        string line = "";
                        System.Text.StringBuilder result = new StringBuilder();

                        string searchPattern = @"\d+\.\d+\.\d+";

                        while (!versionFile.EndOfStream)
                        {
                            line = versionFile.ReadLine();

			                if (System.Text.RegularExpressions.Regex.IsMatch(line, searchPattern) && (line.StartsWith("!define PRODUCT_VERSION")))
                            {
                                line = System.Text.RegularExpressions.Regex.Replace(line, searchPattern, newVersion);
                            }

                            result.AppendLine(line);
                        }

                        versionFile.Close();

                        System.IO.StreamWriter updatedVersionfile = new System.IO.StreamWriter(inputFile);
                        updatedVersionfile.Write(result.ToString());
                        updatedVersionfile.Close();
                    }
                    catch (Exception ex)
                    {
                        ok = false;
                        Console.WriteLine(ex.ToString());
                    }

                    return ok;
                }
                ]]>
          </code>
     </script>
    <!-- end custom scripts -->


    <!-- PROPERTIES -->
    <property name="debug" value="true"/>
    <property name="verbosity" value="true"/>

    <property name="build.dir" value="build"/>
    <property name="src.dir" value="project"/>
    <property name="lib.dir" value="lib"/>
    <property name="package.dir" value="package"/>
    <property name="webdashboard.dir" value="deployed\webdashboard"/>

    <property name="remote.dll" value="ThoughtWorks.CruiseControl.Remote.dll"/>
    <property name="core.dll" value="ThoughtWorks.CruiseControl.Core.dll"/>
    <property name="webdashboard.dll" value="ThoughtWorks.CruiseControl.WebDashboard.dll"/>
    <property name="unittests.dll" value="ThoughtWorks.CruiseControl.UnitTests.dll"/>
    <property name="MSBuildLogger.dll" value="ThoughtWorks.CruiseControl.MSBuild.dll"/>
    <property name="console.exe" value="ccnet.exe"/>
    <property name="service.exe" value="ccservice.exe"/>
    <property name="cctray.exe" value="cctray.exe"/>
    <property name="nunit-console.exe" value="tools\nunit\nunit-console.exe" />
    <property name="ncover-console.exe" value="tools\ncover\NCover.Console.exe" />
    <property name="nantcontrib.assembly" value="tools\nant\contrib\NAnt.Contrib.Tasks.dll" />
    <property name="vil.executable" value="tools\vil\vil.exe" />
    <property name="vil.assemblies" value="comma,separated,list,of,assemblies,to,analyze (full path)" />
    <property name="simian.executable" value="tools\simian\simian-2.2.17.exe" />
    <property name="Gendarme.executable" value="tools\Gendarme\gendarme.exe" />
    <property name="CCNetLabel" value="0" overwrite="false" />    
    <property name="CCNetArtifactDirectory" value="${build.dir}" overwrite="false" />
	<property name="ReleaseVersion" value="0.0.0" />    


	<target name="PrepareForRelease" description="to be used by the person when doing a release on sourceforge, confluence, ...">

		<fail message="Pass the ReleaseVersion property when calling this target with a correct value, eg.: 1.4.4" if="${ReleaseVersion=='0.0.0'}"   />
		
		<echo message="Clearing doc folder of all existing files ... " />
		<delete includeemptydirs="false" >
            <fileset>
                <patternset >
                    <include name="doc/CCNET/**"  />
                    <exclude name="**/.svn/**"  />
					<exclude name="**/_svn/**"  />
				</patternset>
            </fileset>
        </delete>


		<echo message="Updating Nsi files ..." />
		<property name="nsiFile" value = "ccnet.nsi" />

        <if test="${not RuWi::UpdateNsiVersion(nsiFile,ReleaseVersion)}">
            <fail message="updating file: ${nsiFile} failed" />
        </if>


		<property name="nsiFile" value = "ccvalidator.nsi" />

        <if test="${not RuWi::UpdateNsiVersion(nsiFile,ReleaseVersion)}">
            <fail message="updating file: ${nsiFile} failed" />
        </if>

		<property name="nsiFile" value = "cctray.nsi" />

        <if test="${not RuWi::UpdateNsiVersion(nsiFile,ReleaseVersion)}">
            <fail message="updating file: ${nsiFile} failed" />
        </if>



	</target>


	<target name="all" depends="clean, compile, test, deploy, dist"/>

	<target name="clean" description="cleans up everything">
		<delete dir="${build.dir}" if="${directory::exists(build.dir)}"/>
		<delete dir="deployed" if="${directory::exists('deployed')}"/>
		<delete dir="dist" if="${directory::exists('dist')}"/>
	</target>

	<target name="clean-vs" description="Delete Visual Studio artifacts">
		<!-- NB - this target will likely fail if you have the solution open in Visual Studio -->
		<foreach item="File" property="filename">
			<in>
				<items basedir="project">
					<include name="*.suo" />
					<include name="*.resharperoptions" />
					<include name="*\*.user" />
				</items>
			</in>
			<do>
				<delete file="${filename}" />
			</do>
		</foreach>
		<foreach item="Folder" property="foldername">
			<in>
				<items basedir="project">
					<include name="*\bin" />
					<include name="*\obj" />
					<!-- can't seem to pick this up using a wild card -->
					<include name="_ReSharper.ccnet" />
				</items>
			</in>
			<do>
				<delete dir="${foldername}" />
			</do>
		</foreach>
	</target>

	<target name="init" description="initial compilation setup">
		<mkdir dir="${build.dir}" verbose="${verbosity}"/>
	</target>

  <target name="compress" depends="deploy.webdashboard" description="Compresses the JavaScript files">
    <loadtasks assembly="${lib.dir}\Ra.Build.Tasks.dll" />
    <jsmin verbose="false" todir="${webdashboard.dir}\Javascript-compressed">
      <fileset basedir="${webdashboard.dir}\Javascript">
        <include name="\**\*.js" />
      </fileset>
    </jsmin>
    <move todir="${webdashboard.dir}\Javascript" overwrite="true">
      <fileset basedir="${webdashboard.dir}\Javascript-compressed">
        <include name="\**\*.js"/>
      </fileset>
    </move>
    <delete dir="${webdashboard.dir}\Javascript-compressed"/>
  </target>

	<!-- COMPILE -->
	<target name="compile" depends="init" description="compiles everything to be released">
		<loadtasks assembly="${nantcontrib.assembly}" />
		<msbuild project="project\ccnet.sln">
			<property name="Configuration" value="Build" />
		</msbuild>
		
	<!-- <solution configuration="build" solutionfile="project\ccnet.sln" /> -->
		<copy file="${src.dir}\console\app.config" tofile="${build.dir}\server\${console.exe}.config" verbose="${verbosity}"/>
		<copy file="${src.dir}\service\app.config" tofile="${build.dir}\service\${service.exe}.config" verbose="${verbosity}"/>		
		<copy file="${src.dir}\service\ccnet.config" tofile="${build.dir}\service\ccnet.config" verbose="${verbosity}"/>
	</target>

	<!-- TEST -->
	<target name="test" depends="compile, test.unit" />

	<target name="test.unit" description="runs unit tests">
		<property name="unittests.fullpath" value="${path::get-full-path(build.dir)}\unittests" />
		<exec program="${ncover-console.exe}" workingdir="${unittests.fullpath}" commandline="//reg &quot;..\..\${nunit-console.exe}&quot; &quot;${unittests.fullpath}\${unittests.dll}&quot;  /xml:../${unittests.dll}-results.xml /nologo //w &quot;${unittests.fullpath}&quot;"/>

		<ncoverexplorer program="tools\ncoverexplorer\ncoverexplorer.console.exe" projectName="CCNet" outputDir="${build.dir}" satisfactoryCoverage="80" reportType="4" xmlReportName="CoverageSummary.xml">
			<fileset>
				<include name="${unittests.fullpath}\coverage.xml" />
			</fileset>
		</ncoverexplorer>
	</target>

	<!-- DEPLOY -->

	<target name="deploy" depends="compile, deploy.server, deploy.cctray, deploy.webdashboard, compress, deploy.validator" />
	
	<target name="deploy.server" depends="compile">
		<mkdir dir="deployed\server"/>
		<copy todir="deployed\server" verbose="${verbosity}">
			<fileset basedir="${build.dir}\server">
				<include name="**\*" />
				<exclude name="**\*.pdb" />

				<exclude name="**\*.incr" />
				<exclude name="**\PostBuildEvent.bat" />
			</fileset>
		</copy>

		<!-- deliberately copied into same folder as server -->
		<copy todir="deployed\server" verbose="${verbosity}">
			<fileset basedir="${build.dir}\service">
				<include name="**\*" />

				<exclude name="**\*.pdb" />
				<exclude name="**\*.incr" />
				<exclude name="**\PostBuildEvent.bat" />
			</fileset>
		</copy>

		<!-- deliberately copied into same folder as server -->
		<copy file="${lib.dir}\${MSBuildLogger.dll}" todir="deployed\server" verbose="${verbosity}" />
		
		<copy todir="deployed\server\xsl" verbose="${verbosity}">
			<fileset basedir="${src.dir}\xsl">
				<include name="**\*.xsl"/>
				<include name="**\*.css"/>
			</fileset>
		</copy>
	</target>

  <target name="deploy.validator" description="Generate the deployment files for CCValidator." depends="compile">
    <copy todir="deployed\ccvalidator">
      <fileset basedir="${build.dir}\server">
        <include name="CCValidator.exe"/>
        <include name="CCValidator.exe.config"/>
        <include name="*.dll"/>
      </fileset>
    </copy>
  </target>

  <target name="deploy.cctray">
		<mkdir dir="deployed\cctray" />

		<copy todir="deployed\cctray">
			<fileset basedir="${build.dir}\cctray">
				<include name="**\*" />

				<exclude name="**\*.pdb" />
				<exclude name="**\*.incr" />
				<exclude name="**\PostBuildEvent.bat" />
			</fileset>
		</copy>

		<copy todir="deployed\cctray">
			<fileset basedir="project\cctray\Audio">
				<include name="*" />
			</fileset>
		</copy>
	</target>

	<target name="deploy.webdashboard" description="deploys the web dashboard application" depends="compile,build.packages">
		<mkdir dir="${webdashboard.dir}" verbose="${verbosity}"/>
		<copy todir="${webdashboard.dir}\bin">
			<fileset basedir="${build.dir}\webdashboard">
				<include name="**\*" />

				<exclude name="**\*.pdb" />
				<exclude name="**\*.incr" />
				<exclude name="**\PostBuildEvent.bat" />
			</fileset>
		</copy>
		<copy todir="${webdashboard.dir}">
			<fileset basedir="project\webdashboard">
				<include name="**\*.aspx"/>
				<include name="**\*.ascx"/>
				<include name="**\*.asax"/>
				<include name="**\*.config"/>
				<include name="**\*.css"/>
        <include name="**\*.gif"/>
        <include name="**\*.png"/>
				<include name="**\*.html"/>
				<include name="**\*.jpg"/>
				<include name="**\*.jpeg"/>
				<include name="**\*.js" />
				<include name="**\*.vm" />
				<include name="**\*.wav"/>
				<include name="**\*.xsl"/>

				<exclude name="bin\**\*" />
				<exclude name="obj\**\*" />
				<exclude name="test\**\*" />
			</fileset>
		</copy>
	</target>

	<!-- CREATE DISTRIBUTABLES -->
  <target name="dist" depends="deploy">
    <copy todir="deployed" file="license.txt" />
    <mkdir dir="dist"/>
		<copy todir="${webdashboard.dir}\doc">
			<fileset basedir="doc">
				<include name="**\*" />
			</fileset>
		</copy>
		<copy todir="deployed\examples">
			<fileset basedir="project/examples">
				<include name="**\*" />
			</fileset>
		</copy>

		<exec program="tools\NSIS\makensis.exe" commandline="cctray.nsi" />		
		<copy todir="${webdashboard.dir}\cctray">
			<fileset basedir="dist">
				<include name="*CCTray*.exe" />
			</fileset>
		</copy>
		
		<zip zipfile="dist\CruiseControl.NET-${CCNetLabel}.zip">
			<fileset basedir="deployed">
				<include name="**\*" />
			</fileset>
		</zip>
		
		<zip zipfile="dist\CruiseControl.NET-${CCNetLabel}.source.zip">
			<fileset>
				<include name="**\*" />
				<exclude name="build.txt" />
				<exclude name="build\**" />
				<exclude name="deployed\**" />
				<exclude name="dist\**" />
				<exclude name="**\bin\**" />
				<exclude name="**\obj\**" />
				<exclude name="**\CVS\**" />
				<exclude name="**\_Resharper*\**" />
			</fileset>
		</zip>
    <exec program="tools\NSIS\makensis.exe" commandline="ccvalidator.nsi" />
		
		<!-- CCNET-1492: Set ColoredConsoleAppender to the ccnet.exe.config only for the windows installer -->
		<xmlpoke file="deployed\server\${console.exe}.config" xpath="/configuration/log4net/appender[@name='Console']/@type" value="log4net.Appender.ColoredConsoleAppender" />
		
    <exec program="tools\NSIS\makensis.exe" commandline="ccnet.nsi" />
  </target>
		
	<!-- FOR RUNNING CCNET AGAINST ITSELF -->
	<target name="dist.publish" depends="dist">
			
			<property name="publish.dir" value="${CCNetArtifactDirectory}\${CCNetLabel}" />

			<mkdir dir="${publish.dir}" />
			<copy todir="${publish.dir}">
					<fileset basedir="dist">
							<include name="*"/>
					</fileset>
			</copy>			
	</target>
	
	<target name="createAssemblyInfo" description="Create an assembly info file with the current build number" >
	   <asminfo output="project/CommonAssemblyInfo.cs" language="CSharp">
		<imports>
		    <import namespace="System.Reflection" />
		</imports>
		<attributes>
		    <attribute type="AssemblyVersionAttribute" value="${CCNetLabel}" />
		    <attribute type="AssemblyCopyrightAttribute" value="Copyright © ${datetime::get-year(datetime::now())} ThoughtWorks Inc." />
		    <attribute type="AssemblyCompanyAttribute" value="ThoughtWorks" />
		    <attribute type="AssemblyProductAttribute" value="CruiseControl.NET" />
		</attributes>
	    </asminfo>
	</target>

	<target name="ContinuousIntegration" depends="createAssemblyInfo, all, dist.publish, reporting">	
		<echo message="CI Run for build number ${CCNetLabel} successfully completed" />
	</target>
	
	<target name="netreflector.docs" depends="compile">
		<loadtasks assembly="lib\NetReflectorDocumenterTask.dll"/>
		<netreflector assembly="${build.dir}\core\${core.dll}" />
	</target>
	
	<target name="reporting" depends="compile, fxcop, vil, simian, Gendarme" />
	
	<target name="fxcop">
		<mkdir dir="build\fxcop" />
		<exec program="tools\fxcop\fxcopcmd.exe" 
			  commandline="/p:tools\fxcop\ccnet.fxcop /o:build\fxcop\ccnet-fxcop.xml /s" failonerror="false"/>
	</target>

	<target name="vil">
		<exec program="${vil.executable}" 
			workingdir="${build.dir}\webdashboard"
			commandline='/a="${remote.dll},${core.dll},${webdashboard.dll}" /outxml="../ccnet.results-vil.xml"  /m classes,enumerations,structs,types,LOC,events,impInterfaces,WMC,DIT,CBO,RFC,NOC,constructors,methods,imps,fields,properties /sc=type' 
			failonerror="false"/>
    	</target>

    <target name="simian" description="runs simian">    
	<exec program="${simian.executable}">
		<arg value="-formatter=xml:${build.dir}\ccnet.simian-results.xml"/>
		<arg value="-failOnDuplication-"/>
		<arg value="project\core\**\*.cs"/>
	</exec>
	<tstamp/>
	<echo message="Simian run complete"/>
    </target>

  <target name="Gendarme" description="runs Gendarme">
    <exec program="${Gendarme.executable}">
      <arg value="--xml"/>
      <arg value="gendarme.xml"/>
      <arg value="build\cctray\cctray.exe"/>
      <arg value="build\cctray\ThoughtWorks.CruiseControl.CCTrayLib.dll"/>
      <arg value="build\core\ThoughtWorks.CruiseControl.Core.dll"/>
      <arg value="build\core\ThoughtWorks.CruiseControl.Remote.dll"/>
      <arg value="build\server\ccnet.exe"/>
      <arg value="build\server\CCValidator.exe"/>
      <arg value="build\service\ccservice.exe"/>
      <arg value="build\webdashboard\ThoughtWorks.CruiseControl.WebDashboard.dll"/>
    </exec>
    <tstamp/>
    <echo message="Gendarme run complete"/>
  </target>

  <target name="msbuild">
    	<property name="nant.settings.currentframework" value="net-2.0"/>
    	
	<csc target="library" output="${build.dir}/ThoughtWorks.CruiseControl.MsBuild.XmlLogger.dll" debug="${debug}">
		<sources basedir=".">
			<include name="${src.dir}/MsBuildXmlLogger/**/*.cs"/>
		</sources>
		<references>
			<include name="Microsoft.Build.Framework.dll"/>
			<include name="Microsoft.Build.Utilities.dll"/>
		</references>
	</csc>
    </target>
    
    <target name="clean.cvs" description="deletes all backed up merge files from cvs">
    	<delete>
    		<fileset>
    			<include name="**/#.*.*" />
    		</fileset>
    	</delete>
    </target>

  <target name="build.packages" description="Generates the dashboard packages"
          depends="farm.level.packages,server.level.packages,project.level.packages,build.level.packages">
    <copy file="${src.dir}\webdashboard\Packages\packages.xml" tofile="deployed\webdashboard\Packages\packages.xml" verbose="${verbosity}"/>
    <copy todir="deployed\webdashboard\Packages" verbose="${verbosity}">
      <fileset basedir="${build.dir}\webdashboard\Packages">
        <include name="*.zip" />
      </fileset>
    </copy>
  </target>

  <target name="farm.level.packages" description="Generate the farm level packages"
          depends="build.admin.package">
  </target>

  <target name="build.admin.package" description="Generates the web dashboard admin package">
    <mkdir dir="${build.dir}\WebDashboard\Packages\" verbose="${verbosity}"/>
    <zip zipfile="${build.dir}\WebDashboard\Packages\DashboardAdmin.zip">
      <fileset basedir="${src.dir}\WebDashboard\Packages\DashboardAdmin">
        <include name="*.*"/>
      </fileset>
      <fileset basedir="${src.dir}\WebDashboard\Templates">
        <include name="AdminLogin.vm"/>
        <include name="AdministerDashboard.vm"/>
      </fileset>
    </zip>
  </target>

  <target name="server.level.packages" description="Generate the server level packages"
          depends="build.queueStatus.package,build.serverLog.package,build.serverInfo.package,build.serverConfig.package">
  </target>

  <target name="build.queueStatus.package" description="Generates the queue status package">
    <mkdir dir="${build.dir}\WebDashboard\Packages\" verbose="${verbosity}"/>
    <zip zipfile="${build.dir}\WebDashboard\Packages\QueueStatus.zip">
      <fileset basedir="${src.dir}\WebDashboard\Packages\QueueStatus">
        <include name="*.*"/>
      </fileset>
      <fileset basedir="${src.dir}\WebDashboard\Templates">
        <include name="ServerQueueStatus.vm"/>
      </fileset>
    </zip>
  </target>

  <target name="build.serverLog.package" description="Generates the server log package">
    <mkdir dir="${build.dir}\WebDashboard\Packages\" verbose="${verbosity}"/>
    <zip zipfile="${build.dir}\WebDashboard\Packages\ServerLog.zip">
      <fileset basedir="${src.dir}\WebDashboard\Packages\ServerLog">
        <include name="*.*"/>
      </fileset>
      <fileset basedir="${src.dir}\WebDashboard\Templates">
        <include name="ServerLog.vm"/>
      </fileset>
    </zip>
  </target>

  <target name="build.serverInfo.package" description="Generates the server information package">
    <mkdir dir="${build.dir}\WebDashboard\Packages\" verbose="${verbosity}"/>
    <zip zipfile="${build.dir}\WebDashboard\Packages\ServerInfo.zip">
      <fileset basedir="${src.dir}\WebDashboard\Packages\ServerInformation">
        <include name="*.*"/>
      </fileset>
      <fileset basedir="${src.dir}\WebDashboard\Templates">
        <include name="ServerInfo.vm"/>
      </fileset>
    </zip>
  </target>

  <target name="build.serverConfig.package" description="Generates the server configuration package">
    <mkdir dir="${build.dir}\WebDashboard\Packages\" verbose="${verbosity}"/>
    <zip zipfile="${build.dir}\WebDashboard\Packages\ServerConfig.zip">
      <fileset basedir="${src.dir}\WebDashboard\Packages\ServerConfig">
        <include name="*.*"/>
      </fileset>
      <fileset basedir="${src.dir}\WebDashboard\Templates">
        <include name="ProjectServerConfiguration.vm"/>
      </fileset>
    </zip>
  </target>

  <target name="project.level.packages" description="Generate the project level packages"
          depends="build.projectStats.package,build.projectConfig.package,build.modificationHistory.package">
  </target>

  <target name="build.projectStats.package" description="Generates the project statistics package">
    <mkdir dir="${build.dir}\WebDashboard\Packages\" verbose="${verbosity}"/>
    <zip zipfile="${build.dir}\WebDashboard\Packages\ProjectStats.zip">
      <fileset basedir="${src.dir}\WebDashboard\Packages\ProjectStatistics">
        <include name="*.*"/>
      </fileset>
      <fileset basedir="${src.dir}\Xsl">
        <include name="StatisticsGraphs.xsl"/>
      </fileset>
    </zip>
  </target>

  <target name="build.projectConfig.package" description="Generates the project configuration package">
    <mkdir dir="${build.dir}\WebDashboard\Packages\" verbose="${verbosity}"/>
    <zip zipfile="${build.dir}\WebDashboard\Packages\ProjectConfig.zip">
      <fileset basedir="${src.dir}\WebDashboard\Packages\ProjectConfig">
        <include name="*.*"/>
      </fileset>
    </zip>
  </target>

  <target name="build.modificationHistory.package" description="Generates the modification history package">
    <mkdir dir="${build.dir}\WebDashboard\Packages\" verbose="${verbosity}"/>
    <zip zipfile="${build.dir}\WebDashboard\Packages\ModificationHistory.zip">
      <fileset basedir="${src.dir}\WebDashboard\Packages\ModificationHistory">
        <include name="*.*"/>
      </fileset>
    </zip>
  </target>

  <target name="build.level.packages" description="Generate the build level packages"
          depends="build.nunit.package,build.ndepend.package,build.nant.package,build.msbuild.package,build.fxcop.package,build.ncover.package,build.simian.package,build.fitnesse.package,build.gendarme.package,build.msTest.package">
  </target>

  <target name="build.nunit.package" description="Generates the NUnit package">
    <mkdir dir="${build.dir}\WebDashboard\Packages\" verbose="${verbosity}"/>
    <zip zipfile="${build.dir}\WebDashboard\Packages\NUnit.zip">
      <fileset basedir="${src.dir}\WebDashboard\Packages\NUnit">
        <include name="*.*"/>
      </fileset>
      <fileset basedir="${src.dir}\Xsl">
        <include name="unittests.xsl"/>
        <include name="tests.xsl"/>
        <include name="timing.xsl"/>
      </fileset>
    </zip>
  </target>

  <target name="build.ndepend.package" description="Generates the NDepend package">
    <mkdir dir="${build.dir}\WebDashboard\Packages\" verbose="${verbosity}"/>
    <zip zipfile="${build.dir}\WebDashboard\Packages\NDepend.zip">
      <fileset basedir="${src.dir}\WebDashboard\Packages\NDepend">
        <include name="*.*"/>
      </fileset>
      <fileset basedir="${src.dir}\Xsl">
        <include name="ndependreport-ccnet.v2.xsl"/>
      </fileset>
    </zip>
  </target>

  <target name="build.nant.package" description="Generates the NAnt package">
    <mkdir dir="${build.dir}\WebDashboard\Packages\" verbose="${verbosity}"/>
    <zip zipfile="${build.dir}\WebDashboard\Packages\NAnt.zip">
      <fileset basedir="${src.dir}\WebDashboard\Packages\NAnt">
        <include name="*.*"/>
      </fileset>
      <fileset basedir="${src.dir}\Xsl">
        <include name="compile.xsl"/>
        <include name="NAnt.xsl"/>
        <include name="NAntTiming.xsl"/>
      </fileset>
    </zip>
  </target>

  <target name="build.msbuild.package" description="Generates the MSBuild package">
    <mkdir dir="${build.dir}\WebDashboard\Packages\" verbose="${verbosity}"/>
    <zip zipfile="${build.dir}\WebDashboard\Packages\MSBuild.zip">
      <fileset basedir="${src.dir}\WebDashboard\Packages\MSBuild">
        <include name="*.*"/>
      </fileset>
      <fileset basedir="${src.dir}\Xsl">
        <include name="compile-msbuild.xsl"/>
        <include name="msbuild.xsl"/>
      </fileset>
    </zip>
  </target>

  <target name="build.msTest.package" description="Generates the MSTest package">
    <mkdir dir="${build.dir}\WebDashboard\Packages\" verbose="${verbosity}"/>
    <zip zipfile="${build.dir}\WebDashboard\Packages\MSTest.zip">
      <fileset basedir="${src.dir}\WebDashboard\Packages\MSTest">
        <include name="*.*"/>
      </fileset>
      <fileset basedir="${src.dir}\Xsl">
        <include name="MsTestSummary.xsl"/>
        <include name="MsTestReport.xsl"/>
      </fileset>
    </zip>
  </target>

  <target name="build.fxcop.package" description="Generates the FxCop package">
    <mkdir dir="${build.dir}\WebDashboard\Packages\" verbose="${verbosity}"/>
    <zip zipfile="${build.dir}\WebDashboard\Packages\FxCop.zip">
      <fileset basedir="${src.dir}\WebDashboard\Packages\FxCop">
        <include name="*.*"/>
      </fileset>
      <fileset basedir="${src.dir}\Xsl">
        <include name="fxcop-summary_1_36.xsl"/>
      </fileset>
    </zip>
  </target>

  <target name="build.ncover.package" description="Generates the NCover package">
    <mkdir dir="${build.dir}\WebDashboard\Packages\" verbose="${verbosity}"/>
    <zip zipfile="${build.dir}\WebDashboard\Packages\NCover.zip">
      <fileset basedir="${src.dir}\WebDashboard\Packages\NCover">
        <include name="*.*"/>
      </fileset>
      <fileset basedir="${src.dir}\Xsl">
        <include name="NCoverSummary.xsl"/>
        <include name="NCover.xsl"/>
      </fileset>
    </zip>
  </target>

  <target name="build.simian.package" description="Generates the Simian package">
    <mkdir dir="${build.dir}\WebDashboard\Packages\" verbose="${verbosity}"/>
    <zip zipfile="${build.dir}\WebDashboard\Packages\Simian.zip">
      <fileset basedir="${src.dir}\WebDashboard\Packages\Simian">
        <include name="*.*"/>
      </fileset>
      <fileset basedir="${src.dir}\Xsl">
        <include name="SimianSummary.xsl"/>
        <include name="SimianReport.xsl"/>
      </fileset>
    </zip>
  </target>

  <target name="build.fitnesse.package" description="Generates the Fitnesse package">
    <mkdir dir="${build.dir}\WebDashboard\Packages\" verbose="${verbosity}"/>
    <zip zipfile="${build.dir}\WebDashboard\Packages\Fitnesse.zip">
      <fileset basedir="${src.dir}\WebDashboard\Packages\Fitnesse">
        <include name="*.*"/>
      </fileset>
      <fileset basedir="${src.dir}\Xsl">
        <include name="fitnesse.xsl"/>
      </fileset>
    </zip>
  </target>

  <target name="build.gendarme.package" description="Generates the Gendarme package">
    <mkdir dir="${build.dir}\WebDashboard\Packages\" verbose="${verbosity}"/>
    <zip zipfile="${build.dir}\WebDashboard\Packages\Gendarme.zip">
      <fileset basedir="${src.dir}\WebDashboard\Packages\Gendarme">
        <include name="*.*"/>
      </fileset>
      <fileset basedir="${src.dir}\Xsl">
        <include name="gendarme-summary-ccnet.xsl"/>
        <include name="gendarme-report-ccnet.xsl"/>
      </fileset>
    </zip>
  </target>
</project>
