<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NAnt.DotNetTasks</name>
    </assembly>
    <members>
        <member name="T:NAnt.DotNet.Types.ResourceFileSet">
            <summary>
            Specialized <see cref="T:NAnt.Core.Types.FileSet"/> class for managing resource files. 
            </summary>     
        </member>
        <member name="M:NAnt.DotNet.Types.ResourceFileSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.DotNet.Types.ResourceFileSet"/> class.
            </summary>
        </member>
        <member name="M:NAnt.DotNet.Types.ResourceFileSet.GetManifestResourceName(System.String)">
            <summary>
            Gets the manifest resource name for the file according to the 
            attributes that resources was defined with.
            </summary>
            <param name="fileName">The full path and name of the file as returned from <see cref="P:NAnt.Core.Types.FileSet.FileNames"/>.</param>
            <returns>The manifest resource name to be sent to the compiler.</returns>
        </member>
        <member name="P:NAnt.DotNet.Types.ResourceFileSet.Prefix">
            <summary>
            Indicates the prefix to prepend to the actual resource.  
            This is usually the default namspace of the assembly.
            </summary>
        </member>
        <member name="P:NAnt.DotNet.Types.ResourceFileSet.DynamicPrefix">
            <summary>
            Indicates that prefixes should be dynamically generated by taking 
            the path of the resource relative to the basedir and appending it 
            to the specified prefix.
            </summary>
        </member>
        <member name="P:NAnt.DotNet.Types.ResourceFileSet.ResxFiles">
            <summary>
            Gets a <see cref="T:NAnt.Core.Types.FileSet"/> containing all matching resx files.
            </summary>
            <value>
            A <see cref="T:NAnt.Core.Types.FileSet"/> containing all matching resx files.
            </value>
        </member>
        <member name="P:NAnt.DotNet.Types.ResourceFileSet.NonResxFiles">
            <summary>
            Gets a <see cref="T:NAnt.Core.Types.FileSet"/> containing all matching non-resx 
            files.
            </summary>
            <value>
            A <see cref="T:NAnt.Core.Types.FileSet"/> containing all matching non-resx files.
            </value>
        </member>
        <member name="T:NAnt.DotNet.Types.ResourceFileSetCollection">
            <summary>
            Contains a strongly typed collection of <see cref="T:NAnt.DotNet.Types.ResourceFileSet"/> objects.
            </summary>
        </member>
        <member name="M:NAnt.DotNet.Types.ResourceFileSetCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.DotNet.Types.ResourceFileSetCollection"/> class.
            </summary>
        </member>
        <member name="M:NAnt.DotNet.Types.ResourceFileSetCollection.#ctor(NAnt.DotNet.Types.ResourceFileSetCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.DotNet.Types.ResourceFileSetCollection"/> class
            with the specified <see cref="T:NAnt.DotNet.Types.ResourceFileSetCollection"/> instance.
            </summary>
        </member>
        <member name="M:NAnt.DotNet.Types.ResourceFileSetCollection.#ctor(NAnt.DotNet.Types.ResourceFileSet[])">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.DotNet.Types.ResourceFileSetCollection"/> class
            with the specified array of <see cref="T:NAnt.DotNet.Types.ResourceFileSet"/> instances.
            </summary>
        </member>
        <member name="M:NAnt.DotNet.Types.ResourceFileSetCollection.Add(NAnt.DotNet.Types.ResourceFileSet)">
            <summary>
            Adds a <see cref="T:NAnt.DotNet.Types.ResourceFileSet"/> to the end of the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.DotNet.Types.ResourceFileSet"/> to be added to the end of the collection.</param> 
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:NAnt.DotNet.Types.ResourceFileSetCollection.AddRange(NAnt.DotNet.Types.ResourceFileSet[])">
            <summary>
            Adds the elements of a <see cref="T:NAnt.DotNet.Types.ResourceFileSet"/> array to the end of the collection.
            </summary>
            <param name="items">The array of <see cref="T:NAnt.DotNet.Types.ResourceFileSet"/> elements to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.DotNet.Types.ResourceFileSetCollection.AddRange(NAnt.DotNet.Types.ResourceFileSetCollection)">
            <summary>
            Adds the elements of a <see cref="T:NAnt.DotNet.Types.ResourceFileSetCollection"/> to the end of the collection.
            </summary>
            <param name="items">The <see cref="T:NAnt.DotNet.Types.ResourceFileSetCollection"/> to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.DotNet.Types.ResourceFileSetCollection.Contains(NAnt.DotNet.Types.ResourceFileSet)">
            <summary>
            Determines whether a <see cref="T:NAnt.DotNet.Types.ResourceFileSet"/> is in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.DotNet.Types.ResourceFileSet"/> to locate in the collection.</param> 
            <returns>
            <c>true</c> if <paramref name="item"/> is found in the collection;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NAnt.DotNet.Types.ResourceFileSetCollection.CopyTo(NAnt.DotNet.Types.ResourceFileSet[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.        
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param> 
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:NAnt.DotNet.Types.ResourceFileSetCollection.IndexOf(NAnt.DotNet.Types.ResourceFileSet)">
            <summary>
            Retrieves the index of a specified <see cref="T:NAnt.DotNet.Types.ResourceFileSet"/> object in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.DotNet.Types.ResourceFileSet"/> object for which the index is returned.</param> 
            <returns>
            The index of the specified <see cref="T:NAnt.DotNet.Types.ResourceFileSet"/>. If the <see cref="T:NAnt.DotNet.Types.ResourceFileSet"/> is not currently a member of the collection, it returns -1.
            </returns>
        </member>
        <member name="M:NAnt.DotNet.Types.ResourceFileSetCollection.Insert(System.Int32,NAnt.DotNet.Types.ResourceFileSet)">
            <summary>
            Inserts a <see cref="T:NAnt.DotNet.Types.ResourceFileSet"/> into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The <see cref="T:NAnt.DotNet.Types.ResourceFileSet"/> to insert.</param>
        </member>
        <member name="M:NAnt.DotNet.Types.ResourceFileSetCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            A <see cref="T:NAnt.DotNet.Types.ResourceFileSetEnumerator"/> for the entire collection.
            </returns>
        </member>
        <member name="M:NAnt.DotNet.Types.ResourceFileSetCollection.Remove(NAnt.DotNet.Types.ResourceFileSet)">
            <summary>
            Removes a member from the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.DotNet.Types.ResourceFileSet"/> to remove from the collection.</param>
        </member>
        <member name="P:NAnt.DotNet.Types.ResourceFileSetCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="T:NAnt.DotNet.Types.ResourceFileSetEnumerator">
            <summary>
            Enumerates the <see cref="T:NAnt.DotNet.Types.ResourceFileSet"/> elements of a <see cref="T:NAnt.DotNet.Types.ResourceFileSetCollection"/>.
            </summary>
        </member>
        <member name="M:NAnt.DotNet.Types.ResourceFileSetEnumerator.#ctor(NAnt.DotNet.Types.ResourceFileSetCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.DotNet.Types.ResourceFileSetEnumerator"/> class
            with the specified <see cref="T:NAnt.DotNet.Types.ResourceFileSetCollection"/>.
            </summary>
            <param name="arguments">The collection that should be enumerated.</param>
        </member>
        <member name="M:NAnt.DotNet.Types.ResourceFileSetEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; 
            <c>false</c> if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:NAnt.DotNet.Types.ResourceFileSetEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the 
            first element in the collection.
            </summary>
        </member>
        <member name="P:NAnt.DotNet.Types.ResourceFileSetEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
        </member>
        <member name="T:NAnt.DotNet.Tasks.AssemblyLinkerTask">
            <summary>
            Wraps Al.exe, the assembly linker for the .NET Framework.
            </summary>
            <remarks>
              <para>All specified sources will be embedded using the <c>/embed</c> flag.  Other source types are not supported.</para>
            </remarks>
            <example>
              <para>Create a library containing all icon files in the current directory.</para>
              <code>
            <![CDATA[
            <al output="MyIcons.dll" target="lib">
                <sources>
                    <includes name="*.ico"/>
                </sources>
            </al>
            ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.DotNet.Tasks.AssemblyLinkerTask.ExecuteTask">
            <summary>
            Generates an assembly manifest.
            </summary>
        </member>
        <member name="M:NAnt.DotNet.Tasks.AssemblyLinkerTask.NeedsCompiling">
            <summary>
            Determines whether the assembly manifest needs compiling or is 
            uptodate.
            </summary>
            <returns>
            <c>true</c> if the assembly manifest needs compiling; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="P:NAnt.DotNet.Tasks.AssemblyLinkerTask.Output">
            <summary>
            The name of the output file for the assembly manifest.
            </summary>
            <remarks>
            <para>
            Corresponds with the <c>/out</c> flag.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.DotNet.Tasks.AssemblyLinkerTask.OutputTarget">
            <summary>
            The target type (one of "lib", "exe", or "winexe").
            </summary>
            <remarks>
            <para>
            Corresponds with the <c>/t[arget]:</c> flag.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.DotNet.Tasks.AssemblyLinkerTask.Culture">
            <summary>
            The culture string associated with the output assembly.
            The string must be in RFC 1766 format, such as "en-US".
            </summary>
            <remarks>
            <para>
            Corresponds with the <c>/c[ulture]:</c> flag.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.DotNet.Tasks.AssemblyLinkerTask.Template">
            <summary>
            Specifies an assembly from which to get all options except the culture field.
            The given filename must have a strong name.
            </summary>
            <remarks>
            <para>
            Corresponds with the <c>/template:</c> flag.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.DotNet.Tasks.AssemblyLinkerTask.Sources">
            <summary>
            The set of source files to embed.
            </summary>
        </member>
        <member name="P:NAnt.DotNet.Tasks.AssemblyLinkerTask.OutputPath">
            <summary>
            Gets the complete output path.
            </summary>
            <value>The complete output path.</value>
        </member>
        <member name="P:NAnt.DotNet.Tasks.AssemblyLinkerTask.ProgramFileName">
            <summary>
            Gets the filename of the external program to start.
            </summary>
            <value>The filename of the external program.</value>
        </member>
        <member name="P:NAnt.DotNet.Tasks.AssemblyLinkerTask.ProgramArguments">
            <summary>
            Gets the command-line arguments for the external program.
            </summary>
            <value>
            The command-line arguments for the external program.
            </value>
        </member>
        <member name="T:NAnt.DotNet.Tasks.CompilerBase">
            <summary>
            Provides the abstract base class for compiler tasks.
            </summary>
        </member>
        <member name="M:NAnt.DotNet.Tasks.CompilerBase.ExecuteTask">
            <summary>
            Compiles the sources and resources.
            </summary>
        </member>
        <member name="M:NAnt.DotNet.Tasks.CompilerBase.WriteOptions(System.IO.TextWriter)">
            <summary>Allows derived classes to provide compiler-specific options.</summary>
        </member>
        <member name="M:NAnt.DotNet.Tasks.CompilerBase.WriteOption(System.IO.TextWriter,System.String)">
            <summary>
            Writes an option using the default output format.
            </summary>
        </member>
        <member name="M:NAnt.DotNet.Tasks.CompilerBase.WriteOption(System.IO.TextWriter,System.String,System.String)">
            <summary>
            Writes an option and its value using the default output format.
            </summary>
        </member>
        <member name="M:NAnt.DotNet.Tasks.CompilerBase.NeedsCompiling">
            <summary>
            Determines whether compilation is needed.
            </summary>
        </member>
        <member name="M:NAnt.DotNet.Tasks.CompilerBase.GetFormNamespace(System.String)">
            <summary>
            Opens matching source file to find the correct namespace. This may 
            need to be overidden by the particular compiler if the namespace 
            syntax is different for that language.
            </summary>
            <param name="resxPath"></param>
            <returns></returns>
        </member>
        <member name="M:NAnt.DotNet.Tasks.CompilerBase.CompileResxResources(NAnt.Core.Types.FileSet)">
            <summary>
            Compiles the resx files to temp .resources files.
            </summary>
            <param name="resourceFileSet"></param>
        </member>
        <member name="P:NAnt.DotNet.Tasks.CompilerBase.Output">
            <summary>Output directory for the compilation target.</summary>
        </member>
        <member name="P:NAnt.DotNet.Tasks.CompilerBase.OutputTarget">
            <summary>Output type (<c>library</c> or <c>exe</c>).</summary>
        </member>
        <member name="P:NAnt.DotNet.Tasks.CompilerBase.Debug">
            <summary>Generate debug output (<c>true</c>/<c>false</c>).</summary>
        </member>
        <member name="P:NAnt.DotNet.Tasks.CompilerBase.Define">
            <summary>Define conditional compilation symbol(s). Corresponds to <c>/d[efine]:</c> flag.</summary>
        </member>
        <member name="P:NAnt.DotNet.Tasks.CompilerBase.Win32Icon">
            <summary>Icon to associate with the application. Corresponds to <c>/win32icon:</c> flag.</summary>
        </member>
        <member name="P:NAnt.DotNet.Tasks.CompilerBase.WarnAsError">
            <summary>
            Instructs the compiler to treat all warnings as errors (<c>true</c>/<c>false</c>). Default is <c>&quot;false&quot;</c></summary>
            <remarks>
            <para>
            This attribute corresponds to the <c>/warnaserror[+|-]</c> flag of the compiler.
            </para>
            <para>
            When this attribute is set to <c>true</c>, any messages that would ordinarily be reported 
            as warnings will instead be reported as errors.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.DotNet.Tasks.CompilerBase.MainType">
            <summary>
            Specifies which type contains the Main method that you want to use as the entry point into 
            the program.
            </summary>
            <remarks>
            <para>
            This attribute corresponds to the <c>/m[ain]:</c> flag of the compiler.
            </para>
            <para>
            Use this attribute when creating an executable file. If this attribute is omitted, the 
            compiler searches for a valid Main in all public classes.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.DotNet.Tasks.CompilerBase.References">
            <summary>Reference metadata from the specified assembly files.</summary>
        </member>
        <member name="P:NAnt.DotNet.Tasks.CompilerBase.ResourcesList">
            <summary>Resources to embed.</summary>
            <remarks>
            <para>
            This can be a combination of resx files and file resources.
            </para>
            <para>
            .resx files will be compiled by resgen and then embedded into the 
            resulting executable.
            </para>
            <para>
            The <see cref="P:NAnt.DotNet.Types.ResourceFileSet.Prefix"/> property is used to make 
            up the resource name added to the assembly manifest for non resx 
            files.
            </para>
            <para>
            For resx files the namespace from the matching source file is used 
            as prefix. This matches the behaviour of Visual Studio. 
            </para>
            <para>
            Multiple resources tags with different namespace prefixes may be 
            specified.
            </para>
            </remarks>    
        </member>
        <member name="P:NAnt.DotNet.Tasks.CompilerBase.Modules">
            <summary>Link the specified modules into this assembly.</summary>
        </member>
        <member name="P:NAnt.DotNet.Tasks.CompilerBase.Sources">
            <summary>The set of source files for compilation.</summary>
        </member>
        <member name="P:NAnt.DotNet.Tasks.CompilerBase.Extension">
            <summary>
            Gets the file extension required by the current compiler.
            </summary>
            <value>The file extension required by the current compiler.</value>
        </member>
        <member name="P:NAnt.DotNet.Tasks.CompilerBase.OutputPath">
            <summary>
            Gets the complete output path.
            </summary>
            <value>The complete output path.</value>
        </member>
        <member name="P:NAnt.DotNet.Tasks.CompilerBase.ProgramFileName">
            <summary>
            Gets the filename of the external program to start.
            </summary>
            <value>The filename of the external program.</value>
        </member>
        <member name="P:NAnt.DotNet.Tasks.CompilerBase.ProgramArguments">
            <summary>
            Gets the command-line arguments for the external program.
            </summary>
            <value>
            The command-line arguments for the external program.
            </value>
        </member>
        <member name="T:NAnt.DotNet.Tasks.CscTask">
            <summary>
            Compiles C# programs.
            </summary>
            <example>
              <para>Compile <c>helloworld.cs</c> to <c>helloworld.exe</c>.</para>
              <code>
                <![CDATA[
            <csc target="exe" output="helloworld.exe" debug="true">
                <sources>
                    <includes name="helloworld.cs"/>
                </sources>
            </csc>
                ]]>
              </code>
            </example>
        </member>
        <member name="T:NAnt.DotNet.Tasks.FXCompilerBase">
            <summary>
            Provides the abstract base class for a compiler task.
            </summary>
        </member>
        <member name="M:NAnt.DotNet.Tasks.FXCompilerBase.DetermineFilePath">
            <summary>
            Instead of relying on the .NET external program to be in the user's path, point
            to the compiler directly since it lives in the .NET Framework's bin directory.
            </summary>       
            <returns>A fully qualifies pathname including the program name.</returns>
            <exception cref="T:NAnt.Core.BuildException">The task is not available or not configured for the current framework.</exception>
        </member>
        <member name="P:NAnt.DotNet.Tasks.FXCompilerBase.ProgramFileName">
            <summary>
            Gets the filename of the external program to start.
            </summary>
            <value>The filename of the external program.</value>
        </member>
        <member name="M:NAnt.DotNet.Tasks.CscTask.WriteOptions(System.IO.TextWriter)">
            <summary>
            Writes the compiler options to the specified <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer"><see cref="T:System.IO.TextWriter"/> to which the compiler options should be written.</param>
        </member>
        <member name="P:NAnt.DotNet.Tasks.CscTask.Doc">
            <summary>
            The name of the XML documentation file to generate.
            </summary>
            <remarks>
            <para>
            Corresponds with the <c>/doc:</c> flag.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.DotNet.Tasks.CscTask.NoStdLib">
            <summary>
            Instructs the compiler not to import mscorlib.dll (<c>true</c>/<c>false</c>). Default is <c>&quot;false&quot;</c>.
            </summary>
            <remarks>
            <para>
            Corresponds with the <c>/nostdlib[+|-]</c> flag.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.DotNet.Tasks.CscTask.NoConfig">
            <summary>
            Instructs the compiler not to use implicit references to assemblies (<c>true</c>/<c>false</c>). Default is <c>&quot;false&quot;</c>.
            </summary>
            <remarks>
            <para>
            Corresponds with the <c>/noconfig</c> flag.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.DotNet.Tasks.CscTask.Checked">
            <summary>
            Specifies whether an integer arithmetic statement that is not in the scope of the
            <c>checked</c> or <c>unchecked</c> keywords and that results in a value outside the
            range of the data type should cause a run-time exception (<c>true</c>/<c>false</c>).
            Default is <c>&quot;false&quot;</c>.</summary>
            <remarks>
            <para>
            Corresponds with the <c>/checked[+|-]</c> flag.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.DotNet.Tasks.CscTask.Unsafe">
            <summary>
            Instructs the compiler to allow code that uses the <c>unsafe</c> keyword
            (<c>true</c>/<c>false</c>). Default is <c>&quot;false&quot;</c>.
            </summary>
            <remarks>
            <para>
            Corresponds with the <c>/unsafe[+|-]</c> flag.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.DotNet.Tasks.CscTask.Optimize">
            <summary>
            Specifies whether the compiler should perform optimizations to the make 
            output files smaller, faster, and more effecient.
            </summary>
            <value>
            The value of this attribute must be either <c>true</c> or <c>false</c>.
            If <c>false</c>, the switch is omitted.
            </value>
            <remarks>
            <para>
            Corresponds with the <c>/optimize[+|-]</c> flag.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.DotNet.Tasks.CscTask.WarningLevel">
            <summary>
            Specifies the warning level for the compiler to display. Valid values are 0-4. Default is 4.
            </summary>
            <value>The warning level for the compiler to display.</value>
            <remarks>
            <para>
            Corresponds with the <c>/warn</c> flag.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.DotNet.Tasks.CscTask.NoWarn">
            <summary>
            Specifies a comma-separated list of warnings that should be suppressed 
            by the compiler.
            </summary>
            <value>Comma-separated list of warnings that should be suppressed by the compiler.</value>
            <remarks>
            <para>
            Corresponds with the <c>/nowarn</c> flag.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.DotNet.Tasks.CscTask.Codepage">
            <summary>
            Specifies the code page to use for all source code files in the compilation.
            </summary>
            <remarks>
            <para>
            Corresponds with the <c>/codepage</c> flag.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.DotNet.Tasks.CscTask.ExeName">
            <summary>
            Gets the name of the executable that should be used to launch the
            external program.
            </summary>
            <value>
            The name of the executable that should be used to launch the
            external program.
            </value>
            <remarks>
            If a current framework is defined, the name of the executable will
            be retrieved from the configuration of the framework; otherwise the
            <see cref="P:NAnt.Core.Task.Name"/> will be used.
            </remarks>
        </member>
        <member name="P:NAnt.DotNet.Tasks.CscTask.UsesRuntimeEngine">
            <summary>
            Gets a value indicating whether the external program should be executed
            using a runtime engine, if configured.
            </summary>
            <value>
            <c>true</c> if the program should be executed using a runtime engine;
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NAnt.DotNet.Tasks.CscTask.Extension">
            <summary>
            Gets the file extension required by the current compiler.
            </summary>
            <value>For the C# compiler, the file extension is always <c>cs</c>.</value>
        </member>
        <member name="T:NAnt.DotNet.Tasks.JscTask">
            <summary>
            Compiles JScript.NET programs.
            </summary>
            <example>
              <para>Compile helloworld.js to helloworld.exe.</para>
              <code>
                <![CDATA[
            <jsc target="exe" output="helloworld.exe" debug="true">
                <sources>
                    <includes name="helloworld.js"/>
                </sources>
            </jsc>
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.DotNet.Tasks.JscTask.WriteOptions(System.IO.TextWriter)">
            <summary>
            Writes the compiler options to the specified TextWriter.
            </summary>
            <param name="writer"><see cref="T:System.IO.TextWriter"/> to which the compiler options should be written.</param>
        </member>
        <member name="P:NAnt.DotNet.Tasks.JscTask.WarningLevel">
            <summary>
            Specifies the warning level for the compiler to display. Valid values are 0-4. Default is 4.
            </summary>
            <value>The warning level for the compiler to display.</value>
            <remarks>
            <para>
            Corresponds with the <c>/warn</c> flag.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.DotNet.Tasks.JscTask.Codepage">
            <summary>
            Specifies the code page to use for all source code files in the compilation.
            </summary>
            <remarks>
            <para>
            Corresponds with the <c>/codepage</c> flag.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.DotNet.Tasks.JscTask.ExeName">
            <summary>
            Gets the name of the executable that should be used to launch the
            external program.
            </summary>
            <value>
            The name of the executable that should be used to launch the
            external program.
            </value>
            <remarks>
            If a current framework is defined, the name of the executable will
            be retrieved from the configuration of the framework; otherwise the
            <see cref="P:NAnt.Core.Task.Name"/> will be used.
            </remarks>
        </member>
        <member name="P:NAnt.DotNet.Tasks.JscTask.UsesRuntimeEngine">
            <summary>
            Gets a value indicating whether the external program should be executed
            using a runtime engine, if configured.
            </summary>
            <value>
            <c>true</c> if the program should be executed using a runtime engine;
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NAnt.DotNet.Tasks.JscTask.Extension">
            <summary>
            Gets the file extension required by the current compiler.
            </summary>
            <value>For the JScript.NET compiler, the file extension is always <c>js</c>.</value>
        </member>
        <member name="T:NAnt.DotNet.Tasks.NDocTask">
            <summary>
            Runs NDoc to create documentation.
            </summary>
            <remarks>
              <para>See the <a href="http://ndoc.sf.net">NDoc home page</a> for more information.</para>
            </remarks>
            <example>
              <para>Document two assemblies using the MSDN documenter.  The namespaces are documented in <c>NamespaceSummary.xml</c></para>
              <code>
                <![CDATA[
            <ndoc>
                <assemblies basedir="${build.dir}">
                    <includes name="NAnt.exe"/>
                    <includes name="NAnt.Core.dll"/>
                </assemblies>
                <summaries basedir="${build.dir}">
                    <includes name="NamespaceSummary.xml"/>
                </summaries>
                <documenters>
                    <documenter name="MSDN">
                        <property name="OutputDirectory" value="doc\MSDN" />
                        <property name="HtmlHelpName" value="NAnt" />
                        <property name="HtmlHelpCompilerFilename" value="hhc.exe" />
                        <property name="IncludeFavorites" value="False" />
                        <property name="Title" value="An NDoc Documented Class Library" />
                        <property name="SplitTOCs" value="False" />
                        <property name="DefaulTOC" value="" />
                        <property name="ShowVisualBasic" value="True" />
                        <property name="ShowMissingSummaries" value="True" />
                        <property name="ShowMissingRemarks" value="True" />
                        <property name="ShowMissingParams" value="True" />
                        <property name="ShowMissingReturns" value="True" />
                        <property name="ShowMissingValues" value="True" />
                        <property name="DocumentInternals" value="False" />
                        <property name="DocumentProtected" value="True" />
                        <property name="DocumentPrivates" value="False" />
                        <property name="DocumentEmptyNamespaces" value="False" />
                        <property name="IncludeAssemblyVersion" value="False" />
                        <property name="CopyrightText" value="" />
                        <property name="CopyrightHref" value="" />
                     </documenter>
                </documenters> 
            </ndoc>
                ]]>
              </code>
              <para><c>NamespaceSummary.xml</c> contents</para>
              <code>
                <![CDATA[
            <namespaces>
                <namespace name="Foo.Bar">
                    The <b>Foo.Bar</b> namespace reinvents the wheel.
                </namespace>
                <namespace name="Foo.Bar.Tests">
                    The <b>Foo.Bar.Tests</b> namespace ensures that the Foo.Bar namespace reinvents the wheel correctly.
                </namespace>
            </namespaces>
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.DotNet.Tasks.NDocTask.InitializeTask(System.Xml.XmlNode)">
            <summary>
            Initializes the taks and verifies the parameters.
            </summary>
            <param name="taskNode"><see cref="T:System.Xml.XmlNode"/> containing the XML fragment used to define this task instance.</param>
        </member>
        <member name="M:NAnt.DotNet.Tasks.NDocTask.ExecuteTask">
            <summary>
            Generates an NDoc project and builds the documentation.
            </summary>
        </member>
        <member name="M:NAnt.DotNet.Tasks.NDocTask.OnDocBuildingStep(System.Object,NDoc.Core.ProgressArgs)">
            <summary>
            Represents the method that will be called to update the overall 
            percent complete value and the current step name.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NDoc.Core.ProgressArgs"/> that contains the event data.</param>
        </member>
        <member name="M:NAnt.DotNet.Tasks.NDocTask.OnDocBuildingProgress(System.Object,NDoc.Core.ProgressArgs)">
            <summary>
            Represents the method that will be called to update the current
            step's precent complete value.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NDoc.Core.ProgressArgs"/> that contains the event data.</param>
        </member>
        <member name="M:NAnt.DotNet.Tasks.NDocTask.GetDocumenter(NDoc.Core.Project,System.String)">
            <summary>
            Returns the documenter instance to use for this task.
            </summary>
        </member>
        <member name="M:NAnt.DotNet.Tasks.NDocTask.ExpandPropertiesInNodes(System.Xml.XmlNodeList)">
            <summary>
            Performs macro expansion for the given nodes.
            </summary>
            <param name="nodes"><see cref="T:System.Xml.XmlNodeList"/> for which expansion should be performed.</param>
        </member>
        <member name="P:NAnt.DotNet.Tasks.NDocTask.Assemblies">
            <summary>
            The set of assemblies to document.
            </summary>
        </member>
        <member name="P:NAnt.DotNet.Tasks.NDocTask.Summaries">
            <summary>
            The set of namespace summary files.
            </summary>
        </member>
        <member name="T:NAnt.DotNet.Tasks.ResGenTask">
            <summary>
            Converts files from one resource format to another.
            <note>
                <para>
                    If no todir is specified, the resource file will be created next to the input file.
                </para>
            </note>
            </summary>
            <example>
              <para>Convert a resource file from the .resx to the .resources format</para>
              <code>
            <![CDATA[
            <resgen input="translations.resx" output="translations.resources" />
            ]]>
              </code>
            </example>
        </member>
        <member name="T:NAnt.DotNet.Tasks.SdkExternalProgramBase">
            <summary>
            Provides the abstract base class for an external SDK program task.
            </summary>
        </member>
        <member name="M:NAnt.DotNet.Tasks.SdkExternalProgramBase.DetermineFilePath">
            <summary>
            Instead of relying on the .NET external program to be in the user's path, point
            to the compiler directly since it lives in the .NET Framework's bin directory.
            </summary>       
            <returns>A fully qualifies pathname including the program name.</returns>
            <exception cref="T:NAnt.Core.BuildException">The task is not available or not configured for the current framework.</exception>
        </member>
        <member name="P:NAnt.DotNet.Tasks.SdkExternalProgramBase.ProgramFileName">
            <summary>
            Gets the filename of the external program to start.
            </summary>
            <value>The filename of the external program.</value>
        </member>
        <member name="M:NAnt.DotNet.Tasks.ResGenTask.ExecuteTask">
            <summary>
            Converts a single file or group of files.
            </summary>
        </member>
        <member name="M:NAnt.DotNet.Tasks.ResGenTask.RemoveOutputs">
            <summary>
            Cleans up generated files.
            </summary>
        </member>
        <member name="M:NAnt.DotNet.Tasks.ResGenTask.NeedsCompiling(System.String,System.String)">
            <summary>
            Determines whether the specified input file needs to be compiled.
            </summary>
            <param name="input">The input file.</param>
            <param name="output">The output file.</param>
            <returns>
            <c>true</c> if the input file need to be compiled; otherwise 
            <c>false</c>.
            </returns>
        </member>
        <member name="M:NAnt.DotNet.Tasks.ResGenTask.AppendArgument(System.String)">
            <summary>
            Adds a command line argument to the command line for the external
            program that is used to convert the resource files.
            </summary>
            <param name="s">The argument that should be added to the command line.</param>
        </member>
        <member name="M:NAnt.DotNet.Tasks.ResGenTask.getOutputFile(System.String)">
            <summary>
            Determines the full path and extension for the output file.
            </summary>
            <param name="filename">The output file for which the full path and extension should be determined.</param>
            <returns>The full path (with extensions) for the specified file.</returns>
        </member>
        <member name="P:NAnt.DotNet.Tasks.ResGenTask.Input">
            <summary>Input file to process.</summary>
        </member>
        <member name="P:NAnt.DotNet.Tasks.ResGenTask.Output">
            <summary>Name of the resource file to output.</summary>
        </member>
        <member name="P:NAnt.DotNet.Tasks.ResGenTask.TargetExt">
            <summary>The target type (usually resources).</summary>
        </member>
        <member name="P:NAnt.DotNet.Tasks.ResGenTask.ToDirectory">
            <summary>The directory to which outputs will be stored.</summary>
        </member>
        <member name="P:NAnt.DotNet.Tasks.ResGenTask.Resources">
            <summary>Takes a list of .resX or .txt files to convert to .resources files.</summary>
        </member>
        <member name="P:NAnt.DotNet.Tasks.ResGenTask.ProgramArguments">
            <summary>
            Gets the command line arguments for the external program.
            </summary>
            <value>
            The command line arguments for the external program.
            </value>
        </member>
        <member name="P:NAnt.DotNet.Tasks.ResGenTask.ExeName">
            <summary>
            Gets the name of the executable that should be used to launch the
            external program.
            </summary>
            <value>
            The name of the executable that should be used to launch the
            external program.
            </value>
            <remarks>
            If a current framework is defined, the name of the executable will
            be retrieved from the configuration of the framework; otherwise the
            <see cref="P:NAnt.Core.Task.Name"/> will be used.
            </remarks>
        </member>
        <member name="P:NAnt.DotNet.Tasks.ResGenTask.UsesRuntimeEngine">
            <summary>
            Gets a value indicating whether the external program should be executed
            using a runtime engine, if configured.
            </summary>
            <value>
            <c>true</c> if the program should be executed using a runtime engine;
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:NAnt.DotNet.Tasks.VbcTask">
             <summary>
             Compiles Visual Basic.NET programs.
             </summary>
             <example>
               <para>Example build file using this task.</para>
               <code><![CDATA[
            <project name="Hello World" default="build" basedir=".">
               <property name="basename" value="HelloWorld"/>
               <property name="debug" value="true"/>
               <target name="clean">
                  <delete file="${basename}-vb.exe" failonerror="false"/>
                  <delete file="${basename}-vb.pdb" failonerror="false"/>
               </target>
               <target name="build">
                  <vbc target="exe" output="${basename}-vb.exe">
                     <sources>
                        <includes name="${basename}.vb"/>
                     </sources>
                  </vbc>
               </target>
               <target name="debug" depends="clean">
                  <vbc target="exe" output="${basename}-vb.exe" debug="${debug}">
                     <sources>
                        <includes name="${basename}.vb"/>
                     </sources>
                  </vbc>
               </target>
            </project>]]>
               </code>
             </example>
        </member>
        <member name="M:NAnt.DotNet.Tasks.VbcTask.GetFormNamespace(System.String)">
            <summary>
            Local override to ensure the Rootnamespace is prefixed
            </summary>
            <param name="resxPath"></param>
            <returns></returns>
        </member>
        <member name="M:NAnt.DotNet.Tasks.VbcTask.WriteOptions(System.IO.TextWriter)">
            <summary>
            Writes the compiler options to the specified TextWriter.
            </summary>
            <param name="writer"><see cref="T:System.IO.TextWriter"/> to which the compiler options should be written.</param>
        </member>
        <member name="P:NAnt.DotNet.Tasks.VbcTask.BaseAddress">
            <summary>Specifies whether <c>/baseaddress</c> option gets passed to the compiler.</summary>
            <remarks><a href="ms-help://MS.NETFrameworkSDK/vblr7net/html/valrfbaseaddressspecifybaseaddressofdll.htm">See the Microsoft.NET Framework SDK documentation for details.</a></remarks>
            <value>The value of this property is a string that makes up a 32bit hexidecimal number.</value>
        </member>
        <member name="P:NAnt.DotNet.Tasks.VbcTask.Imports">
            <summary>Specifies whether the <c>/imports</c> option gets passed to the compiler</summary>
            <remarks><a href="ms-help://MS.NETFrameworkSDK/vblr7net/html/valrfImportImportNamespaceFromSpecifiedAssembly.htm">See the Microsoft.NET Framework SDK documentation for details.</a></remarks>
            <value>The value of this attribute is a string that contains one or more namespaces separated by commas.</value>
            <example>Example of an imports attribute
            <code><![CDATA[imports="Microsoft.VisualBasic, System, System.Collections, System.Data, System.Diagnostics"]]></code></example>
        </member>
        <member name="P:NAnt.DotNet.Tasks.VbcTask.OptionCompare">
            <summary>Specifies whether <c>/optioncompare</c> option gets passed to the compiler</summary>
            <remarks><a href="ms-help://MS.NETFrameworkSDK/vblr7net/html/valrfOptioncompareSpecifyHowStringsAreCompared.htm">See the Microsoft.NET Framework SDK documentation for details.</a></remarks>
            <value>The value of this property must be either <c>text</c>, <c>binary</c>, or an empty string.  If the value is <c>false</c> or empty string, the switch is omitted.</value>
        </member>
        <member name="P:NAnt.DotNet.Tasks.VbcTask.OptionExplicit">
            <summary>Specifies whether the <c>/optionexplicit</c> option gets passed to the compiler.</summary>
            <remarks><a href="ms-help://MS.NETFrameworkSDK/vblr7net/html/valrfOptionexplicitRequireExplicitDeclarationOfVariables.htm">See the Microsoft.NET Framework SDK documentation for details.</a></remarks>
            <value>The value of this attribute must be either <c>true</c> or <c>false</c>.  If <c>false</c>, the switch is omitted.</value>
        </member>
        <member name="P:NAnt.DotNet.Tasks.VbcTask.OptionOptimize">
            <summary>Specifies whether the <c>/optimize</c> option gets passed to the compiler.</summary>
            <remarks><a href="ms-help://MS.NETFrameworkSDK/vblr7net/html/valrfoptimizeenabledisableoptimizations.htm">See the Microsoft.NET Framework SDK documentation for details.</a></remarks>
            <value>The value of this attribute must be either <c>true</c> or <c>false</c>.  If <c>false</c>, the switch is omitted.</value>
        </member>
        <member name="P:NAnt.DotNet.Tasks.VbcTask.OptionStrict">
            <summary>Specifies whether the <c>/optionstrict</c> option gets passed to the compiler.</summary>
            <remarks><a href="ms-help://MS.NETFrameworkSDK/vblr7net/html/valrfOptionstrictEnforceStrictTypeSemantics.htm">See the Microsoft.NET Framework SDK documentation for details.</a></remarks>
            <value>The value of this attribute must be either <c>true</c> or <c>false</c>.  If <c>false</c>, the switch is omitted.</value>
        </member>
        <member name="P:NAnt.DotNet.Tasks.VbcTask.RemoveIntChecks">
            <summary>Specifies whether the <c>/removeintchecks</c> option gets passed to the compiler.</summary>
            <remarks><a href="ms-help://MS.NETFrameworkSDK/vblr7net/html/valrfRemoveintchecksRemoveInteger-OverflowChecks.htm">See the Microsoft.NET Framework SDK documentation for details.</a></remarks>
            <value>The value of this attribute must be either <c>true</c> or <c>false</c>.  If <c>false</c>, the switch is omitted.</value>
        </member>
        <member name="P:NAnt.DotNet.Tasks.VbcTask.RootNamespace">
            <summary>Specifies whether the <c>/rootnamespace</c> option gets passed to the compiler.</summary>
            <remarks><a href="ms-help://MS.NETFrameworkSDK/vblr7net/html/valrfRootnamespace.htm">See the Microsoft.NET Framework SDK documentation for details.</a></remarks>
            <value>The value of this attribute is a string that contains the root namespace of the project.</value>
        </member>
        <member name="P:NAnt.DotNet.Tasks.VbcTask.ExeName">
            <summary>
            Gets the name of the executable that should be used to launch the
            external program.
            </summary>
            <value>
            The name of the executable that should be used to launch the
            external program.
            </value>
            <remarks>
            If a current framework is defined, the name of the executable will
            be retrieved from the configuration of the framework; otherwise the
            <see cref="P:NAnt.Core.Task.Name"/> will be used.
            </remarks>
        </member>
        <member name="P:NAnt.DotNet.Tasks.VbcTask.UsesRuntimeEngine">
            <summary>
            Gets a value indicating whether the external program should be executed
            using a runtime engine, if configured.
            </summary>
            <value>
            <c>true</c> if the program should be executed using a runtime engine;
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NAnt.DotNet.Tasks.VbcTask.Extension">
            <summary>
            Gets the file extension required by the current compiler.
            </summary>
            <value>For the VB.NET compiler, the file extension is always <c>vb</c>.</value>
        </member>
        <member name="T:NAnt.DotNet.Tasks.VjcTask">
             <summary>
             Compiles Visual J# programs using vjc, Microsoft's J# compiler.
             </summary>
             <example>
               <para>Compile <c>helloworld.jsl</c> to <c>helloworld.exe</c>.</para>
               <code>
                 <![CDATA[
            <vjc target="exe" output="helloworld.exe" debug="true">
               <sources>
                  <includes name="helloworld.jsl"/>
               </sources>
            </vjc>
                 ]]>
               </code>
             </example>
        </member>
        <member name="M:NAnt.DotNet.Tasks.VjcTask.WriteOptions(System.IO.TextWriter)">
            <summary>
            Writes the compiler options to the specified <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer"><see cref="T:System.IO.TextWriter"/> to which the compiler options should be written.</param>
        </member>
        <member name="P:NAnt.DotNet.Tasks.VjcTask.SecureScoping">
            <summary>
            Specifies whether package-scoped members are accessible outside of the assembly.
            In other words, package scope is treated as assembly scope when emitting metadata.
            <para>By default, secure scoping is off.</para>
            <para>Corresponds to the <c>/securescoping</c> flag.</para>
            </summary>
            <remarks><a href="ms-help://MS.VSCC/MS.VJSharp/dv_vjsharp/html/vjgrfsecurescopingmakepackage-scopedmembersinaccessibleoutsideassembly.htm">See the Visual J# Reference for details.</a></remarks>
            <value>
            <para>The value of this attribute must be either <c>true</c> or <c>false</c>.</para>
            <para>If <c>false</c>, the switch is omitted.</para>
            </value>
            <example>
            <code><![CDATA[<vjc securescoping='true'/>]]></code>
            </example>
        </member>
        <member name="P:NAnt.DotNet.Tasks.VjcTask.X">
            <summary>
            Specifies whether to disable language extensions.
            <para>Corresponds to the <c>/x</c> flag.</para>
            </summary>
            <remarks><a href="ms-help://MS.VSCC/MS.VJSharp/dv_vjsharp/html/vjgrfxdisablelanguageextensions.htm">See the Visual J# Reference for details.</a></remarks>
            <value>
            <para>The value of this property must be either <c>all</c>, <c>net</c>, or an empty string.</para>
            <para>Note: <c>net</c> disables only .NET Framework extensions while <c>all</c> also disables VJ++ 6.0 extensions.</para>
            </value>
            <example>
            <para>To disable only the .NET Framework extensions:<c><![CDATA[
            <vjc x='net'/>
            ]]></c></para>
            <para>To disable the .NET Framework extensions and the VJ++ 6.0 extensions:<c><![CDATA[
            <vjc x='all'/>
            ]]></c></para>
            </example>
        </member>
        <member name="P:NAnt.DotNet.Tasks.VjcTask.LibPath">
            <summary>
            Specifies the location of assemblies referenced by way of the <c>/reference</c> flag.
            <para>Corresponds to the <c>/libpath:dir[;dir2]</c> flag.</para>
            </summary>
            <remarks><a href="ms-help://MS.VSCC/MS.VJSharp/dv_vjsharp/html/vjgrflibpathspecifyassemblyreferencelocations.htm">See the Visual J# Reference for details.</a></remarks>
            <value>
            <para>The value of this property must exist or an empty string.</para>
            <para>If <c>false</c>, or an empty string, the switch is omitted.</para>
            </value>
        </member>
        <member name="P:NAnt.DotNet.Tasks.VjcTask.Jcpa">
            <summary>
            Associate Java-language/COM package names.
            <para>Corresponds to the <c>/jcpa:package=namespace</c> and <c>/jcpa:@filename</c> flags.</para>
            </summary>
            <remarks><a href="ms-help://MS.VSCC/MS.VJSharp/dv_vjsharp/html/vjgrfjcpaassociatejava-compackages.htm">See the Visual J# Reference for details.</a></remarks>
            <value>
            <para>The value of this propery. must be <c>package=namespace</c>, <c>@filename</c>, or an empty string.</para>
            </value>
            <example>
            <para>Map package 'x' to namespace 'y':<c><![CDATA[
            <vjc jcpa='x=y'/>
            ]]></c></para>
            </example>
        </member>
        <member name="P:NAnt.DotNet.Tasks.VjcTask.Codepage">
            <summary>
            Specifies the code page to use for all source code files in the compilation.
            </summary>
            <remarks>
            <para>
            Corresponds with the <c>/codepage</c> flag.
            </para>
            <para>
            <a href="ms-help://MS.VSCC/MS.VJSharp/dv_vjsharp/html/vjlrfcodepagespecifycodepageforsourcecodefiles.htm">See the Visual J# Reference for details.</a>
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.DotNet.Tasks.VjcTask.WarningLevel">
            <summary>
            Specifies the warning level for the compiler to display. Valid values are 0-4. Default is 4.
            </summary>
            <value>The warning level for the compiler to display.</value>
            <remarks>
            <para>
            Corresponds with the <c>/warn</c> option.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.DotNet.Tasks.VjcTask.NoWarn">
            <summary>
            Specifies a comma-separated list of warnings that should be suppressed 
            by the compiler.
            </summary>
            <value>Comma-separated list of warnings that should be suppressed by the compiler.</value>
            <remarks>
            <para>
            Corresponds with the <c>/nowarn</c> option.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.DotNet.Tasks.VjcTask.ExeName">
            <summary>
            Gets the name of the executable that should be used to launch the
            external program.
            </summary>
            <value>
            The name of the executable that should be used to launch the
            external program.
            </value>
            <remarks>
            If a current framework is defined, the name of the executable will
            be retrieved from the configuration of the framework; otherwise the
            <see cref="P:NAnt.Core.Task.Name"/> will be used.
            </remarks>
        </member>
        <member name="P:NAnt.DotNet.Tasks.VjcTask.Extension">
            <summary>
            Gets the file extension required by the current compiler.
            </summary>
            <value>For the J# compiler, the file extension is always <c>jsl</c>.</value>
        </member>
    </members>
</doc>
